#!/usr/bin/env python
"""
    %prog config imagefile catfile
OR
    %prog [options] exposurename [ ccd ]

Run an exposure through the weak lensing code. If ccd is not sent, process all
ccds in the exposure.  When sending exposurename, you must specify an serun=
or a dataset=
"""

import sys
from sys import stdout,stderr
import logging
import deswl

logging.basicConfig(level=logging.ERROR)

from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option("--serun", default=None,
    help="The run identifier. If sent a runconfig is "
         "read and verified against current settings. The outdir will be "
         "set to the usual place (see below)")

parser.add_option("-c","--config", default=None,
                  help="Where the wl.config is located")


parser.add_option("--outdir", default=None,
                  help="Where to place the output file. Default "
                       " is '.' if the serun is not sent,"
                       " but if serun is sent it will be"
                       " $DESDATA/wlbnl/{serun}/exposurename")
parser.add_option("--rootdir", default=None,
    help="Specify the data root directory. Default $DESDATA")
parser.add_option("--copyroot", action='store_true', default=False,
    help="Copy output files to the default path under $DESDATA")

parser.add_option("-t","--types",default="stars,psf,shear",
                  help="Comma separated list indicating which"
                       " types of processing to perform stars,psf,shear,split.  Default %default")

parser.add_option("--dataset", default=None,
                  help="dataset. e.g. 'dr012'. If serun is sent, dataset will be automatically determined")
#parser.add_option("--cleanup", action='store_true', default=False,
# help="If copyroot and cleanup then the local copy of each output is deleted.")

parser.add_option("--nodots", action='store_true', default=False,
                  help="Don't print progress dots.")


#parser.add_option("--writelog", action='store_true', default=False,
# help="Write QS/STATUS messages to a QA log file")


parser.add_option("--debug", default=0,
                  help="Debug verbosity level. 0:none 1:dbg 2:xdbg. Default %default")
parser.add_option("--pydebug", default=False, action='store_true',
                  help="Turn on debugging in python.Default %default")

options, args = parser.parse_args(sys.argv[1:])

types = options.types
types = types.split(',')

debug=int(options.debug)


if len(args) < 1:
    parser.print_help()
    sys.exit(45)

if len(args) == 3:
    config = args[0]
    image = args[1]
    cat = args[2]

    ip = deswl.wlpipe.ImageProcessor(config, image, cat, outdir=options.outdir)
    if debug > 0:
        ip.set_verbose(debug)

    ip.process(types)

else:

    exposurename=args[0]

    if len(args) > 1:
        ccd=int(args[1])
    else:
        ccd=None

    ep = deswl.wlpipe.ExposureProcessor(exposurename,
                                        serun=options.serun,    # only need serun OR dataset
                                        dataset=options.dataset,
                                        config=options.config,
                                        outdir=options.outdir,
                                        copyroot=options.copyroot,
                                        rootdir=options.rootdir,
                                        nodots=options.nodots)

    log_level = logging.ERROR
    if options.pydebug:
        log_level = logging.DEBUG
    ep.logger.setLevel(log_level)

    if debug > 0:
        ep.set_verbose(debug)

    if ccd is None:
        ep.process_all_ccds(types=types)
    else:
        ep.process_ccd(ccd, types=types)

