# vim: set filetype=python :

import os
import sys
from sys import stdout, stderr
import distutils
import distutils.sysconfig
import subprocess

Import('env')

if env['WITH_PYTHON']:

    # for the /bin directory
    me_run_file=env.File('bin/multishear-run')
    me_check_file=env.File('bin/multishear-check')
    se_run_file=env.File('bin/shear-run')
    se_check_file=env.File('bin/shear-check')
    se_check_one_file=env.File('bin/shear-check-one')
    me_seinputs_file=env.File('bin/generate-me-seinputs')

    gen_generic_file=env.File('bin/generate-generic-wq')
    run_generic_file=env.File('bin/wl-run-generic')
    check_generic_file=env.File('bin/wl-check-generic')

    se_wq_file=env.File('bin/generate-se-wq')
    me_wq_file=env.File('bin/generate-me-wq')

    bin_install_subdir = 'bin'
    bin_targets = [me_run_file, 
                   me_check_file,
                   se_run_file,
                   gen_generic_file,
                   run_generic_file,
                   check_generic_file,
                   se_check_file,
                   se_check_one_file,
                   se_wq_file,
                   me_wq_file,
                   me_seinputs_file]


    # for the /lib/pythonX/site-packages directory
    init_file = env.File('__init__.py')
    wlpipe_file = env.File('wlpipe.py')
    #oracle_file = env.File('oracle.py')
    files_file = env.File('files.py')

    generic_file = env.File('generic.py')
    impyp_file = env.File('impyp.py')
    am_file = env.File('am.py')

    main_libdir=distutils.sysconfig.get_python_lib()
    pylib_install_subdir = main_libdir.replace(distutils.sysconfig.PREFIX+os.sep,'')
    pylib_install_subdir = os.path.join(pylib_install_subdir, 'deswl')
    #pylib_targets = [init_file,wlpipe_file,oracle_file,files_file]
    pylib_targets = [init_file,wlpipe_file,files_file,generic_file,
                     impyp_file,am_file]


    if env['WITH_PYTHON_BINDINGS']:
        import numpy

        # try to build the python bindings

        ReadFileList=env['__readfunc']
        files = ReadFileList('../src/wl_files.txt')
        files_omp = ReadFileList('../src/wl_omp_files.txt')

        files = ['../src/'+f for f in files]
        files_omp = ['../src/'+f for f in files_omp]

        env2 = env.Clone()

        import distutils.sysconfig
        env2.Prepend(CPPPATH=[distutils.sysconfig.get_python_inc(),
                              numpy.get_include()])
        #env2.Prepend(SWIGFLAGS=['-python','-c++'])
        env2.Prepend(LIBS=['wl'])

        # special environment for openmp stuff
        env2_omp = env2.Clone()

        if env['WITH_OPENMP']:
            env2_omp.Append(CCFLAGS=env['OMP_FLAGS'])

        objs = env2.SharedObject(files)
        objs_omp = env2_omp.SharedObject(files_omp)

        #ext_lib = env2_omp.SharedLibrary('_cwl', 
        #                                 ['cwl.i','cwl.cpp']+objs+objs_omp,
        #                                 SHLIBPREFIX='')
        
        # just create the swig wrapper ourselves, many systems have old buggy
        # version of SWIG installed and it is hard to get scons to see the
        # newer ones installed in alternative places
        ext_lib = env2_omp.SharedLibrary('_cwl', 
                                         ['cwl.cpp','cwl_wrap.cpp']+objs+objs_omp,
                                         SHLIBPREFIX='')
        pylib_targets += [ext_lib,'cwl.py']


    if 'install' in COMMAND_LINE_TARGETS:
        RunInstall = env['_InstallProgram']
        RunInstall(env, bin_targets, bin_install_subdir)
        RunInstall(env, pylib_targets, pylib_install_subdir)

    if 'uninstall' in COMMAND_LINE_TARGETS:
        RunUninstall = env['_UninstallProgram']
        RunUninstall(env, bin_targets, bin_install_subdir)

        # remove the directory too
        pylib_deltargets = pylib_targets + ['']
        RunUninstall(env, pylib_deltargets, pylib_install_subdir)


