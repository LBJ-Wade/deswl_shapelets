#!/usr/bin/env python
"""
    %prog [options]

One of the following
    multishear-run -r merun -i coadd_id
    multishear-run -r merun -t tilename
    multishear-run -c wlconfig -d dataset -i coadd_id
    multishear-run -c wlconfig -d dataset -t tilename -b band

There are also long versions of each switch.

Basically you need enough info to determine the paths.  Since dataset and
band are implied by a run, that is enough.  If only dataset then you need
both tilename and band to fully specify.  You also need to give the
weak lensing config file.

sending tilename instead of coadd_id will be slower since the data are
keyed by id.

Obviously the versions without an merun are only for testing purposes.

We could also use the run id of the coadd but that is too unwieldy.
"""

import sys
from sys import stdout,stderr
import deswl

from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option("-r","--merun",default="", help="multi-epoch run")
parser.add_option("-i","--id",default=None, help="coadd file id")
parser.add_option("-t","--tile",default="", help="tile name")

parser.add_option("-d","--dataset",default="", help="Data set, e.g. 'dr012'")
parser.add_option("-c","--config",default="", help="wl.config file url")
parser.add_option("-b","--band",default="", help="bandpass")

parser.add_option("-o","--outdir",default=None, 
    help="output dir. Defaults to '.' when running by dataset or the "
         "'usual' place when merun is sent")

parser.add_option("--nodots", action='store_true', default=False,
    help="Don't print progress dots.")
parser.add_option("--debug", default=0,
    help="Debug verbosity level. 0:none 1:dbg 2:xdbg. Default %default")

def procopts_merun(options):
    conf={}

    rc=deswl.files.Runconfig(options.merun)
    rc.verify()

    # we need either id or tile sent
    if options.id:
        ci=deswl.files.coadd_info_select(rc['dataset'],rc['band'],
                                         ids=options.id)
    elif options.tile:
        ci=deswl.files.coadd_info_select(rc['dataset'],rc['band'],
                                         tiles=options.tile)
    else:
        parser.print_help()
        sys.exit(45)

    conf['dataset'] = rc['dataset']
    conf['wlconfig'] = rc['wl_config']
    conf['merun'] = options.merun

    return conf, ci

def procopts_dataset(options):
    conf={}
    if options.config and options.id:
        ci=deswl.files.coadd_info_select(options.dataset,options.band,
                                         ids=options.id)
    elif options.config and options.tile and options.band:
        ci=deswl.files.coadd_info_select(options.dataset,options.band,
                                         tiles=options.tile)
    else:
        parser.print_help()
        sys.exit(45)
    
    conf['wlconfig'] = options.config

    return conf, ci

def procopts(options):
    if options.merun:
        conf, ci = procopts_merun(options)
    elif options.dataset:
        conf, ci = procopts_dataset(options)
    else:
        parser.print_help()
        sys.exit(45)

    conf['tilename']  = ci['tilename']
    conf['band']      = ci['band']
    conf['image_id']  = ci['image_id']
    conf['cat_id']    = ci['cat_id']
    conf['coadd_run'] = ci['run']
    conf['image_url'] = ci['image_url']
    conf['cat_url']   = ci['cat_url']

    return conf

def add_environ(conf):
    e=deswl.files.get_proc_environ()
    for k in e:
        conf[k] = e[k]

def add_outputs(conf, outdir=None):
    merun=conf.get('merun',None)
    fdict=deswl.files.generate_me_filenames(conf['tilename'], conf['band'],
                                            merun=merun, dir=outdir)

def main():
    options, args = parser.parse_args(sys.argv[1:])

    conf=procopts(options)
    add_environ(conf)
    add_outputs(conf, outdir=options.outdir)

    ctp = deswl.wlpipe.CoaddTileProcessor(conf)
    print ctp
    print ctp.get_command()
    #ctp.run()

main()
