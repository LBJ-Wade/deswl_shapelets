#!/usr/bin/env python
"""
    %prog [options] run

Generate all the wq job files for the given run.  Also generate a wq script for
checking the result of each exposure.

Finally, generate a script to reduce the results of the parallelized check
scripts

"""

import os,sys
from sys import stderr
import deswl
from deswl.files import ShearFiles,SEWQJob
import desdb

from optparse import OptionParser
parser = OptionParser(__doc__)
parser.add_option("-g","--groups",default='new,new2', help="groups for queue")


# script to check the outputs
def write_reducer(run):
    text="""
from sys import stderr
import glob
import deswl
import esutil as eu

files=glob.glob('byccd/*-check.json')
goodlist=[]
badlist=[]
nf=len(files)
for i,f in enumerate(files,1):
    if (i % 100) == 0 or (i == 1):
        print >>stderr,f,"%s/%s" % (i,nf)
    d=eu.io.read(f)
    if d['error_string'] == '':
        goodlist.append(d)
    else:
        print >>stderr,d['stat'],'\\n',d['error_string']
        badlist.append(d)
goodfile=deswl.files.collated_path('{run}', 'goodlist')
badfile=deswl.files.collated_path('{run}', 'badlist')
eu.ostools.makedirs_fromfile(goodfile)

print >>stderr,"Found %s/%s problems" % (len(badlist),nf)

print >>stderr,"Writing goodlist:",goodfile
eu.io.write(goodfile,goodlist)
print >>stderr,"Writing badlist:",badfile
eu.io.write(badfile,badlist)
    """.format(run=run)

    d=deswl.files.wq_dir(run)
    f=os.path.join(d,'check-reduce.py')
    print >>stderr,"writing check reduce script:",f
    with open(f,'w') as fobj:
        fobj.write(text)




def main():

    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 1:
        parser.print_help()
        sys.exit(45)

    run=args[0]

    #write_reducer(run)
    modnum=20

    rc=deswl.files.Runconfig(run)

    if rc['run_type'] == 'impyp':
        cfobj = deswl.impyp.ImpypConfig(run)
    else:
        raise ValueError("unsupported run type: '%s'" % rc['run_type'])

    # write all the config files by ccd
    print >>stderr,"writing all config files"
    cfobj.write()

    expnames = list(cfobj.get_config_data().keys())
    expnames.sort()

    # number of exposures
    nexp=len(expnames)

    print >>stderr,'writing wq scripts for',nexp,'exposures'
    for i,expname in enumerate(expnames):
        job=deswl.generic.GenericSEWQJob(run,expname)
        if ((i+1) % modnum) == 0:
            print >>stderr,'%d/%d %s' % (i+1,nexp,job['job_file'])

        job.write()

main()

