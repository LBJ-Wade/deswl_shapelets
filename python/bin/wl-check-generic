#!/usr/bin/env python
"""
    %prog config_file

Some log messages go to stderr.  The actual data in dict form go to stdout
"""

import sys, os
from sys import stderr, stdout
import copy
import esutil as eu
from esutil.io import fexists

from optparse import OptionParser
parser = OptionParser(__doc__)

def process_status(info):
    """
    info modified in place
    """

    # can also check hdfs
    stat_file=info['output_files']['stat']
    if not fexists(stat_file):
        info['error_string'] = 'stat file not found'
    else:
        stat_read=False
        try:
            stat=eu.io.read(stat_file)
            stat_read=True
            for k,v in stat.iteritems():
                info[k] = v
        except ValueError as e:
            print >>stderr,"Error reading stat file:",stat_file
            info['error_string'] = 'Error reading stat file'

        if stat_read:
            exit_status= stat['exit_status']
            if exit_status != 0:
                print >>stderr,"Found non-zero exit status %s in stat file" \
                        % exit_status
                info['error_string'] = 'Processing error'
            else:
                missing=[]
                for ftype,f in info['output_files'].iteritems():
                    print >>stderr,'    checking:',f
                    if not fexists(f):
                        # only print first missing one
                        if len(missing) == 0:
                            print >>stderr,'file missing:',f
                        missing.append(ftype)

                if len(missing) > 0:
                    fmiss=' '.join(missing)
                    info['error_string'] = 'files missing: %s' % fmiss
    return info

def main():
    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 1:
        parser.print_help()
        sys.exit(45)

    fname=args[0]
    print >>stderr,'reading:',fname
    info={'config':fname,'error_string':''}

    if not fexists(fname):
        info['error_string'] = 'config file not found'
    else:
        config_read = False
        try:
            config=eu.io.read(fname)
            config_read = True
            for k,v in config.iteritems():
                info[k] = v
        except ValueError as e:
            print >>stderr,"Error reading file:",fname
            info['error_string'] = 'Error reading config file'

        if config_read:
            info = process_status(info)
    
    eu.io.write(stdout, info, type='json')
 

main()
