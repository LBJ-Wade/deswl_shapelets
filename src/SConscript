# vim: set filetype=python :

import os
import glob

def xxd(fname, outfname):
    fbase=os.path.basename(fname).replace('.','_')

    data=open(fname).read()
    datalen=len(data)

    escaped_data = data.replace('\n','\\n')
    escaped_data = escaped_data.replace('"','\\"')

    outst="""\nchar %s[] = "%s";
    """ % (fbase, escaped_data)

    outf=open(outfname, "w")
    outf.write(outst)

    outf.write("\nunsigned int %s_len = %s;\n" % (fbase,datalen));
    outf.close()


Import('env')
ReadFileList=env['__readfunc']

try:
    xxd("fitsparams.config","fp.h")
except:
    print '    Failure making file fp.h.'
    print '    This is ok if you have not updated fitsparams.config'

try:
    xxd("findstars.params.default","fspd.h")
except:
    print '    Failure making file fspd.h.'
    print '    This is ok if you have not updated findstars.params.default'


header_dir = 'src'

bin_install_dir = os.path.join(env['PREFIX'], 'bin')
lib_install_dir = os.path.join(env['PREFIX'], 'lib')
header_install_dir = os.path.join(env['PREFIX'], 'include')


libwl_files = ReadFileList('wl_files.txt')
libwl_omp_files = ReadFileList('wl_omp_files.txt')
libgary_files = ReadFileList('gary_files.txt')

env1 = env.Clone()

if env['MEM_TEST']:
    print 'Using mmgr.cpp'
    libwl_files += ['mmgr.cpp']

env2 = env1.Clone()

if env['WITH_OPENMP']:
    env2.Append(CCFLAGS=env['OMP_FLAGS'])

# Library file containing generic code
obj_lib = env1.StaticObject(libwl_files)
obj_omp_lib = env2.StaticObject(libwl_omp_files)
obj_gary = env1.StaticObject(libgary_files)


libwl = env.StaticLibrary('#lib/wl',obj_lib+obj_omp_lib)

lib_targets = [libwl]

libgary = env.StaticLibrary('#lib/gary',obj_gary)

# Use env2 for these, since we have openmp stuff in the BasicSetup function.
env2.Prepend(LIBS=['wl'])

env3 = env2.Clone()
env3.Prepend(LIBS=['gary'])
compiler = env3['CXXTYPE']
if env3['CXXTYPE'] == 'g++':
    env3.Append(CCFLAGS=['-fno-var-tracking-assignments'])

measurepsf = env2.Program('measurepsf', 'MeasurePsf.cpp')

measureshear = env2.Program('measureshear', 'MeasureShear.cpp')

findstars = env2.Program('findstars', 'FindStars.cpp')

multishear = env2.Program('multishear', 'MeasureMultiShear.cpp')

fullpipe = env2.Program('fullpipe', 'FullPipeline.cpp')

testwl = env3.Program('testwl', 'TestWL.cpp')

testnl = env2.Program('testnl', 'TestNL.cpp')

test_psfrec = env2.Program('test-psfrec', 'TestPsfRec.cpp')

#test_scat_split = env2.Program('test-scat-split', 'test-scat-split.cpp')

# These next few don't need the wl library, so they use env

shearave = env.Program('shearave', 'ShearAverage.cpp')

calcq = env.Program('calcq', 'CalcQ.cpp')

g08setup = env.Program('g08setup', 'G08Setup.cpp')

bin_targets = [measurepsf, measureshear, findstars, multishear, fullpipe, 
               test_psfrec, shearave, calcq, g08setup]

if 'install' in COMMAND_LINE_TARGETS:


    env.Alias(target='install',
              source=env.Install(dir=bin_install_dir, source=bin_targets))

    if env['WITH_LIB']:
        env.Alias(target='install', 
                  source=env.Install(dir=lib_install_dir, source=lib_targets))

        hglob = os.path.join('#'+header_dir,'*.h')
        env.Alias(target='install', 
                  source=env.Install(dir=header_install_dir, 
                                     source=Glob(hglob)))


if 'uninstall' in COMMAND_LINE_TARGETS:
    # There is no env.Uninstall method, we must build our own
    deltarget = Delete("$TARGET")

    # delete from $prefix/bin/
    binfiles = [os.path.join(bin_install_dir, os.path.basename(str(f[0]))) for f in bin_targets]

    for f in binfiles:
        env.Alias('uninstall', env.Command(f, None, deltarget))


    # Delete files from include
    hfiles = Glob(os.path.join(header_install_dir, '*'))
    for f in hfiles:
        env.Alias('uninstall', env.Command(f, None, deltarget))

    libfiles = [os.path.join(lib_install_dir, os.path.basename(str(f[0]))) for f in lib_targets]

    for f in libfiles:
        env.Alias('uninstall', env.Command(f, None, deltarget))
