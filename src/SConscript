# vim: set filetype=python :

import os

def xxd(fname, outfname):
    fbase=os.path.basename(fname).replace('.','_')

    data=open(fname).read()
    datalen=len(data)

    escaped_data = data.replace('\n','\\n')
    escaped_data = escaped_data.replace('"','\\"')

    outst="""\nchar %s[] = "%s";
    """ % (fbase, escaped_data)

    outf=open(outfname, "w")
    outf.write(outst)

    outf.write("\nunsigned int %s_len = %s;\n" % (fbase,datalen));
    outf.close()


Import('env')

try:
    xxd("fitsparams.config","fp.h")
except:
    print '    Failure making file fp.h.'
    print '    This is ok if you have not updated fitsparams.config'

try:
    xxd("findstars.params.default","fspd.h")
except:
    print '    Failure making file fspd.h.'
    print '    This is ok if you have not updated findstars.params.default'

junk="""
pipe = os.popen("xxd -i fitsparams.config fp.h")
xxdexit = pipe.close()
if not (xxdexit == None):
    print 'Warning: xxd exit status = ',xxdexit
    print '         Failure making file fp.h.'
    print '         This is ok if you have not updated fitsparams.config'

pipe = os.popen("xxd -i findstars.params.default fspd.h")
xxdexit = pipe.close()
if not (xxdexit == None):
    print 'Warning: xxd exit status = ',xxdexit
    print '         Failure making file fspd.h.'
    print '         This is ok if you have not updated findstars.params.default'
"""

libwl_files="""Bounds.cpp Legendre2D.cpp NLSolver.cpp Image.cpp BVec.cpp
EllipseSolver.cpp Pixel.cpp Transformation.cpp ConfigFile.cpp FittedPSF.cpp
EllipseSolver2.cpp CrudeMeasure.cpp Name.cpp Log.cpp Ellipse.cpp PsiHelper.cpp
Histogram.cpp StarFinder.cpp StarCatalog.cpp PsfCatalog.cpp Params.cpp
ShearCatalog.cpp InputCatalog.cpp ExecuteCommand.cpp CoaddCatalog.cpp 
ShearCatalogTree.cpp MultiShearCatalog.cpp WlVersion.cpp Pool.cpp""".split()

libwl_omp_files="""
Ellipse_omp.cpp StarCatalog_omp.cpp PsfCatalog_omp.cpp Pixel_omp.cpp
ShearCatalog_omp.cpp MultiShearCatalog_omp.cpp """.split()

env1 = env.Clone()

if env['MEM_TEST']:
    print 'Using mmgr.cpp'
    libwl_files += ['mmgr.cpp']

env2 = env1.Clone()

if env['WITH_OPENMP']:
    env2.Append(CCFLAGS=env['OMP_FLAGS'])

# Library file containing generic code
obj_lib = env1.Object(libwl_files)
obj_omp_lib = env2.Object(libwl_omp_files)

libwl = env.Library('#lib/wl',obj_lib+obj_omp_lib)

# Use env2 for these, since we have openmp stuff in the BasicSetup function.
env2.Prepend(LIBS=['wl'])

measurepsf = env2.Program('measurepsf', 'MeasurePSF.cpp')

measureshear = env2.Program('measureshear', 'MeasureShear.cpp')

findstars = env2.Program('findstars', 'FindStars.cpp')

multishear = env2.Program('multishear', 'MeasureMultiShear.cpp')

fullpipe = env2.Program('fullpipe', 'FullPipeline.cpp')

testwl = env2.Program('testwl', 'TestWL.cpp')

testnl = env2.Program('testnl', 'TestNL.cpp')

test_psfrec = env2.Program('test-psfrec', 'TestPSFRec.cpp')

bin_install_dir = os.path.join(env['PREFIX'], 'bin')

bin_targets = [measurepsf, measureshear, findstars, multishear, fullpipe, 
               test_psfrec]

if 'install' in COMMAND_LINE_TARGETS:
    env.Alias(target='install',
              source=env.Install(dir=bin_install_dir, source=bin_targets))


if 'uninstall' in COMMAND_LINE_TARGETS:
    # There is no env.Uninstall method, we must build our own
    deltarget = Delete("$TARGET")

    # delete from $prefix/bin/
    binfiles = [os.path.join(bin_install_dir, os.path.basename(str(f[0]))) for f in bin_targets]

    for f in binfiles:
        env.Alias('uninstall', env.Command(f, None, deltarget))

