# vim: set filetype=python :

import os

Import('env')

libwl_files="""Bounds.cpp Legendre2D.cpp NLSolver.cpp Image.cpp
BVec.cpp EllipseSolver.cpp Pixel.cpp Transformation.cpp
ConfigFile.cpp FittedPSF.cpp CrudeMeasure.cpp ReadCatalog.cpp 
SingleShear.cpp NLSolver.cpp Log.cpp
FitsFile.cpp Histogram.cpp StarFinder.cpp SXCat.cpp""".split()

libwl_omp_files="""Ellipse.cpp PsiHelper.cpp 
DoMeasurePSF.cpp DoMeasureShear.cpp SinglePSF.cpp""".split()

if env['MEM_TEST']:
    print 'Using mmgr.cpp'
    libwl_files += ['mmgr.cpp']

# Library file containing generic code
obj_lib = env.Object(libwl_files)

env2 = env.Clone()
if env['WITH_OPENMP'] :
  env2.Append(CCFLAGS=env['OMP_FLAGS'])
obj_lib_omp = env2.Object(libwl_omp_files)

libwl = env.Library('#lib/wl',obj_lib+obj_lib_omp)

env2.Prepend(LIBS=['wl'])

measurepsf = env2.Program('measurepsf', 'MeasurePSF.cpp')

measureshear = env2.Program('measureshear', 'MeasureShear.cpp')

findstars = env2.Program('findstars', 'FindStars.cpp')

#testwl = env.Program('testwl', 'TestWL.cpp')

#testnl = env.Program('testnl', 'TestNL.cpp')

bin_install_dir = os.path.join(env['PREFIX'], 'bin')

bin_targets = [measurepsf, measureshear, findstars]

if 'install' in COMMAND_LINE_TARGETS:
    env.Alias(target='install',
              source=env.Install(dir=bin_install_dir, source=bin_targets))


if 'uninstall' in COMMAND_LINE_TARGETS:
    # There is no env.Uninstall method, we must build our own
    deltarget = Delete("$TARGET")

    # delete from $prefix/bin/
    binfiles = [os.path.join(bin_install_dir, os.path.basename(str(f[0]))) for f in bin_targets]

    for f in binfiles:
        env.Alias('uninstall', env.Command(f, None, deltarget))

