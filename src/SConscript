# vim: set filetype=python :

import os

Import('env')

pipe = os.popen("xxd -i fitsparams.config fp.h")
xxdexit = pipe.close()
if not (xxdexit == None):
  print 'Warning: xxd exit status = ',xxdexit
  print '         Failure making file fp.h.'
  print '         This is ok if you have not updated fitsparams.config'

pipe = os.popen("xxd -i findstars.params.default fspd.h")
xxdexit = pipe.close()
if not (xxdexit == None):
  print 'Warning: xxd exit status = ',xxdexit
  print '         Failure making file fspd.h.'
  print '         This is ok if you have not updated findstars.params.default'


libwl_files="""Bounds.cpp Legendre2D.cpp NLSolver.cpp Image.cpp
BVec.cpp EllipseSolver.cpp Pixel.cpp Transformation.cpp
ConfigFile.cpp FittedPSF.cpp CrudeMeasure.cpp Name.cpp
NLSolver.cpp Log.cpp Ellipse.cpp PsiHelper.cpp 
FitsFile.cpp Histogram.cpp StarFinder.cpp StarCatalog.cpp
PSFCatalog.cpp ShearCatalog.cpp InputCatalog.cpp ExecuteCommand.cpp
WlVersion.cpp""".split()


if env['MEM_TEST']:
    print 'Using mmgr.cpp'
    libwl_files += ['mmgr.cpp']

# Library file containing generic code
obj_lib = env.Object(libwl_files)

libwl = env.Library('#lib/wl',obj_lib)

env.Prepend(LIBS=['wl'])

measurepsf = env.Program('measurepsf', 'MeasurePSF.cpp')

measureshear = env.Program('measureshear', 'MeasureShear.cpp')

findstars = env.Program('findstars', 'FindStars.cpp')

fullpipe = env.Program('fullpipe', 'FullPipeline.cpp')

testwl = env.Program('testwl', 'TestWL.cpp')

testnl = env.Program('testnl', 'TestNL.cpp')

bin_install_dir = os.path.join(env['PREFIX'], 'bin')

bin_targets = [measurepsf, measureshear, findstars, fullpipe]

if 'install' in COMMAND_LINE_TARGETS:
    env.Alias(target='install',
              source=env.Install(dir=bin_install_dir, source=bin_targets))


if 'uninstall' in COMMAND_LINE_TARGETS:
    # There is no env.Uninstall method, we must build our own
    deltarget = Delete("$TARGET")

    # delete from $prefix/bin/
    binfiles = [os.path.join(bin_install_dir, os.path.basename(str(f[0]))) for f in bin_targets]

    for f in binfiles:
        env.Alias('uninstall', env.Command(f, None, deltarget))

