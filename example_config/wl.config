
# Debugging parameters:
#
# verbose = 0 means no debug output, 1 = some, 2 = all
# If debug_file is set, that file is used for output, else std::cout is used.
# You may instead specify debug_ext which will use root.debug_ext as the 
# debug file.
#
# If output_dots is set, it will output status dots as the calculation proceeds.
# If timing is set, it will output information about the calculation time.
#
verbose	= 1
#debug_file = measurepsf.debug
#debug_ext = .psfdebug
#output_dots = 1
#time = 1

# For parallel compilations, you can set the number of threads to be 
# different than the default value openmp chooses on its own.
# Well, you should be able to.... This isn't working yet.
#num_threads = 2


# Filename parameters:
#
# The filenames are all assumed to all be of the form root.ext
# where root is the same for all of them, but ext changes.
# root is typically given on the command line or formed from 
# a list of file names.
# The extensions are given here:
# 
# The input image file is root.image_ext
# The input weight image file is root.weight_ext
# The input (full) catalog is root.allcat_ext
# The input star catalog is root.starcat_ext
# The undistortion file is root.dist_ext
# The output psf catalog is root.psf_ext
# The output shear catalog is root.shear_ext
# The fitted psf file is root.fitpsf_ext
# 
# Note: the above are written with the . between root and ext.
# Technically, the . must be in either one or the other.
# This allows for the possibility of some other format for roots and extension
# such as an _ for example.
#
# Also, every one of these files may be specified completely rather than
# through the root+ext model.  To do this, you simply define a parameter
# xxx_file, rather than xxx_ext.  This xxx_file (e.g. image_file) parameter
# should contain the complete file name for the file in question.
#
#root = [Usually given on the command line]
image_ext = .fits.fz
weight_ext = .fits.fz
allcat_ext = -all.csv
starcat_ext = -star.csv
#dist_ext = .undfunc2
psf_ext = .psf
shear_ext = .shear
fitpsf_ext = .fitpsf
#
# The image and weight images may have an hdu != 1.  If so, they may 
# be specified here:
image_hdu = 2
weight_hdu = 3


# Noise parameters:
#
# The allowed methods for calculating the noise in the image are:
# VALUE, CATALOG, CATALOG_SIGMA, GAIN_VALUE, GAIN_FITS, WEIGHTIMAGE
#
noise_method = VALUE
#
# If noise_method == VALUE:
# Then the noise is given here as a fixed value for all pixels:
#
noise = 1.e3
#
# If noise_method == CATALOG:
# Then the noise value is read in from the input catalog.
#
#i_noise = 16
#
# If noise_method == CATALOG_SIGMA:
# Then the value sigma is read in from the input catalog.
# The variance is sigma*sigma
#
#i_noise = 16
#
# If noise_method == GAIN_VALUE:
# Then the noise is calculated from assuming Poisson statistics, and
# the gain and read noise values, which should be given here.
# noise_variance = (I(i,j)+extra_sky)/gain+readnoise
# where extrasky, if given here, is the sky value that was subtracted
# from the image intensities in processing.
# (If the sky has not been subtracted, leave extrasky 0 or undefined.)
#
#gain = 1.
#readnoise = 0.
#extra_sky = 1.e4
#
# If noise_method == GAIN_FITS:
# Then the noise is calculated as above, but the values for gain and readnoise
# are read in from the fits file.
# The values gain_key and readnoise_key give the keys for these values 
# in the fits file.  More than one may be given, in which case, each will
# be tried until one is successful.
#
#gain_key = GAIN  ARCONG
#readnoise_key = RDNOISE  RON  ARCONRN
#
# If noise_method == WEIGHTIMAGE:
# Then the noise is read in from a weight image file.
# The weight file gives the inverse noise for each pixel.
# It is taken to have the same name as the input fitsfile, but with
# (possibly) a different extension, given by weightext.
# You may also specify an HDU to use if necessary with weighthdu
#
#weight_ext = fits
#weight_hdu = 2


# Input catalog parameters:
# The position of each parameter in the input catalog is given by i_???
# So i_x = 3 means the third item in each row is x.
# The required values are i_x, i_y.
# The optional values are i_sky, i_errcode, i_noise.
i_x = 2
i_y = 3
#i_sky = 6
#i_errcode = 14
#i_noise = 16   
#
# Lines in the input file to skip can be specified by an initial token,
# The default is # as in this file, but a different one may be specified here.
# (More than one may be specified, separated by white space.)
#comment_marker = !
#
# The default is for the catalog parameters in each row of the input file
# to be separated by whitespace.  If you have a comma delimited file, for
# example, you can specify the delimeter here:
delim = ,
#
# For non-whitespace-delimited files, there is no easy string commands, so
# I needed to use character arrays for the values in each row.  These are 
# usually just numbers, so they should be only about 5 or 10 characters each.
# I use a buffer of 500 characters to be "absolutely" safe.  However, if you
# have something crazy in your input file and you want to increase this you
# can set bufsize to be something larger.
#bufsize = 500


# PSF parameters:
# 
# psf_aperture = How many sigma to use for the aperture
psf_aperture = 5.
# max_aperture = The maximum size of the aperture in arcsec
max_aperture = 10.
# psf_order = The order of the shapelet decomposition to be measured
psf_order = 6


# Fitting PSF parameters
#
# fitpsf_order = The order in x,y of the fit across a chip
fitpsf_order = 2
# The fit involves a rotation into the principal components of the PSF
# The number of principal components to use is given by one of the following:
#
# fitpsf_npca = The number of components to use
#fitpsf_npca = 5
#
# fitpsf_pca_thresh = Use all components with singular values greater
#                     than fitpsf_pca_thresh * S(0)
fitpsf_pca_thresh = 1.e-3


# Shear parameters:
# 
# gal_aperture = How many sigma to use for the aperture
gal_aperture = 3.
# max_aperture = The maximum size of the aperture in arcsec
max_aperture = 10.
# gal_order = The order of the shapelet decomposition to be measured
gal_order = 6
# gal_order2 = The order of the shapelet decomposition to use for the shear 
#              measurement
gal_order2 = 2
# min_gal_size = The minimum galaxy size to bother trying to measure the 
#                shear for.  Measured in multiples of the PSF size.
min_gal_size = 1.0
# f_psf = A parameter determining the sigma of the shapelet decomposition
#         sigma^2_obs = sigma^2_gal + f_psf sigma^2_psf
#         So far, only f_psf = 1 has been tested.
f_psf = 1.0

